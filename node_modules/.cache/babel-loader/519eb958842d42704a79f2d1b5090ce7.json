{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar BrandVettingList;\nvar BrandVettingPage;\nvar BrandVettingInstance;\nvar BrandVettingContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the BrandVettingList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingList\n *\n * @param {Twilio.Messaging.V1} version - Version of the resource\n * @param {string} brandSid - A2P BrandRegistration Sid\n */\n\n/* jshint ignore:end */\n\nBrandVettingList = function BrandVettingList(version, brandSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function brandVettings\n   * @memberof Twilio.Messaging.V1.BrandRegistrationContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingContext}\n   */\n\n  /* jshint ignore:end */\n  function BrandVettingListInstance(sid) {\n    return BrandVettingListInstance.get(sid);\n  }\n\n  BrandVettingListInstance._version = version; // Path Solution\n\n  BrandVettingListInstance._solution = {\n    brandSid: brandSid\n  };\n  BrandVettingListInstance._uri = `/a2p/BrandRegistrations/${brandSid}/Vettings`;\n  /* jshint ignore:start */\n\n  /**\n   * create a BrandVettingInstance\n   *\n   * @function create\n   * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingList#\n   *\n   * @param {object} opts - Options for request\n   * @param {brand_vetting.vetting_provider} opts.vettingProvider -\n   *          Third-party provider of the vettings to create\n   * @param {string} [opts.vettingId] - The unique ID of the vetting\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed BrandVettingInstance\n   */\n\n  /* jshint ignore:end */\n\n  BrandVettingListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.vettingProvider)) {\n      throw new Error('Required parameter \"opts.vettingProvider\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'VettingProvider': _.get(opts, 'vettingProvider'),\n      'VettingId': _.get(opts, 'vettingId')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new BrandVettingInstance(this._version, payload, this._solution.brandSid, this._solution.brandVettingSid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams BrandVettingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {brand_vetting.vetting_provider} [opts.vettingProvider] -\n   *          Third-party provider of the vettings to create\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  BrandVettingListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists BrandVettingInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {brand_vetting.vetting_provider} [opts.vettingProvider] -\n   *          Third-party provider of the vettings to create\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  BrandVettingListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of BrandVettingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {brand_vetting.vetting_provider} [opts.vettingProvider] -\n   *          Third-party provider of the vettings to create\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  BrandVettingListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'VettingProvider': _.get(opts, 'vettingProvider'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new BrandVettingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of BrandVettingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  BrandVettingListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new BrandVettingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a brand_vetting\n   *\n   * @function get\n   * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingList#\n   *\n   * @param {string} brandVettingSid - SID for third-party vetting record\n   *\n   * @returns {Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  BrandVettingListInstance.get = function get(brandVettingSid) {\n    return new BrandVettingContext(this._version, this._solution.brandSid, brandVettingSid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  BrandVettingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  BrandVettingListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return BrandVettingListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the BrandVettingPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {BrandVettingSolution} solution - Path solution\n *\n * @returns BrandVettingPage\n */\n\n/* jshint ignore:end */\n\n\nBrandVettingPage = function BrandVettingPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(BrandVettingPage.prototype, Page.prototype);\n\nBrandVettingPage.prototype.constructor = BrandVettingPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of BrandVettingInstance\n *\n * @function getInstance\n * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingPage#\n *\n * @param {BrandVettingPayload} payload - Payload response from the API\n *\n * @returns BrandVettingInstance\n */\n\n/* jshint ignore:end */\n\nBrandVettingPage.prototype.getInstance = function getInstance(payload) {\n  return new BrandVettingInstance(this._version, payload, this._solution.brandSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nBrandVettingPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nBrandVettingPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the BrandVettingContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingInstance\n *\n * @property {string} accountSid - The SID of the Account that created the vetting\n * @property {string} brandSid - A2P BrandRegistration Sid\n * @property {string} brandVettingSid - SID for third-party vetting record\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {string} vettingId - The unique ID of the vetting\n * @property {string} vettingClass - The type of vetting\n * @property {string} vettingStatus - Status of vetting attempt\n * @property {brand_vetting.vetting_provider} vettingProvider -\n *          Third-party provider that has conducted the vetting\n * @property {string} url - The absolute URL of the Brand Vetting\n *\n * @param {V1} version - Version of the resource\n * @param {BrandVettingPayload} payload - The instance payload\n * @param {sid} brandSid - A2P BrandRegistration Sid\n * @param {sid} brandVettingSid - SID for third-party vetting record\n */\n\n/* jshint ignore:end */\n\n\nBrandVettingInstance = function BrandVettingInstance(version, payload, brandSid, brandVettingSid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.brandSid = payload.brand_sid; // jshint ignore:line\n\n  this.brandVettingSid = payload.brand_vetting_sid; // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.vettingId = payload.vetting_id; // jshint ignore:line\n\n  this.vettingClass = payload.vetting_class; // jshint ignore:line\n\n  this.vettingStatus = payload.vetting_status; // jshint ignore:line\n\n  this.vettingProvider = payload.vetting_provider; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    brandSid: brandSid,\n    brandVettingSid: brandVettingSid || this.brandVettingSid\n  };\n};\n\nObject.defineProperty(BrandVettingInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new BrandVettingContext(this._version, this._solution.brandSid, this._solution.brandVettingSid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a BrandVettingInstance\n *\n * @function fetch\n * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed BrandVettingInstance\n */\n\n/* jshint ignore:end */\n\nBrandVettingInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nBrandVettingInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nBrandVettingInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the BrandVettingContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} brandSid - A2P BrandRegistration Sid\n * @param {sid} brandVettingSid - SID for third-party vetting record\n */\n\n/* jshint ignore:end */\n\n\nBrandVettingContext = function BrandVettingContext(version, brandSid, brandVettingSid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    brandSid: brandSid,\n    brandVettingSid: brandVettingSid\n  };\n  this._uri = `/a2p/BrandRegistrations/${brandSid}/Vettings/${brandVettingSid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a BrandVettingInstance\n *\n * @function fetch\n * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed BrandVettingInstance\n */\n\n/* jshint ignore:end */\n\n\nBrandVettingContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new BrandVettingInstance(this._version, payload, this._solution.brandSid, this._solution.brandVettingSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nBrandVettingContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nBrandVettingContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  BrandVettingList: BrandVettingList,\n  BrandVettingPage: BrandVettingPage,\n  BrandVettingInstance: BrandVettingInstance,\n  BrandVettingContext: BrandVettingContext\n};","map":{"version":3,"sources":["/home/arpitha/Desktop/8JAN2/spreadsheet/node_modules/twilio/lib/rest/messaging/v1/brandRegistration/brandVetting.js"],"names":["Q","require","_","util","Page","deserialize","values","BrandVettingList","BrandVettingPage","BrandVettingInstance","BrandVettingContext","version","brandSid","BrandVettingListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","vettingProvider","deferred","defer","data","of","promise","uri","method","then","payload","resolve","brandVettingSid","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","brand_sid","brand_vetting_sid","dateUpdated","iso8601DateTime","date_updated","dateCreated","date_created","vettingId","vetting_id","vettingClass","vetting_class","vettingStatus","vetting_status","vetting_provider","url","_context","undefined","Object","defineProperty","fetch","_proxy","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar BrandVettingList;\nvar BrandVettingPage;\nvar BrandVettingInstance;\nvar BrandVettingContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the BrandVettingList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingList\n *\n * @param {Twilio.Messaging.V1} version - Version of the resource\n * @param {string} brandSid - A2P BrandRegistration Sid\n */\n/* jshint ignore:end */\nBrandVettingList = function BrandVettingList(version, brandSid) {\n  /* jshint ignore:start */\n  /**\n   * @function brandVettings\n   * @memberof Twilio.Messaging.V1.BrandRegistrationContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingContext}\n   */\n  /* jshint ignore:end */\n  function BrandVettingListInstance(sid) {\n    return BrandVettingListInstance.get(sid);\n  }\n\n  BrandVettingListInstance._version = version;\n  // Path Solution\n  BrandVettingListInstance._solution = {brandSid: brandSid};\n  BrandVettingListInstance._uri = `/a2p/BrandRegistrations/${brandSid}/Vettings`;\n  /* jshint ignore:start */\n  /**\n   * create a BrandVettingInstance\n   *\n   * @function create\n   * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingList#\n   *\n   * @param {object} opts - Options for request\n   * @param {brand_vetting.vetting_provider} opts.vettingProvider -\n   *          Third-party provider of the vettings to create\n   * @param {string} [opts.vettingId] - The unique ID of the vetting\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed BrandVettingInstance\n   */\n  /* jshint ignore:end */\n  BrandVettingListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.vettingProvider)) {\n      throw new Error('Required parameter \"opts.vettingProvider\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'VettingProvider': _.get(opts, 'vettingProvider'),\n      'VettingId': _.get(opts, 'vettingId')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new BrandVettingInstance(\n        this._version,\n        payload,\n        this._solution.brandSid,\n        this._solution.brandVettingSid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams BrandVettingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {brand_vetting.vetting_provider} [opts.vettingProvider] -\n   *          Third-party provider of the vettings to create\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  BrandVettingListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists BrandVettingInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {brand_vetting.vetting_provider} [opts.vettingProvider] -\n   *          Third-party provider of the vettings to create\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  BrandVettingListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of BrandVettingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {brand_vetting.vetting_provider} [opts.vettingProvider] -\n   *          Third-party provider of the vettings to create\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  BrandVettingListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'VettingProvider': _.get(opts, 'vettingProvider'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new BrandVettingPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of BrandVettingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  BrandVettingListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new BrandVettingPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a brand_vetting\n   *\n   * @function get\n   * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingList#\n   *\n   * @param {string} brandVettingSid - SID for third-party vetting record\n   *\n   * @returns {Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingContext}\n   */\n  /* jshint ignore:end */\n  BrandVettingListInstance.get = function get(brandVettingSid) {\n    return new BrandVettingContext(this._version, this._solution.brandSid, brandVettingSid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  BrandVettingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  BrandVettingListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return BrandVettingListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the BrandVettingPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {BrandVettingSolution} solution - Path solution\n *\n * @returns BrandVettingPage\n */\n/* jshint ignore:end */\nBrandVettingPage = function BrandVettingPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(BrandVettingPage.prototype, Page.prototype);\nBrandVettingPage.prototype.constructor = BrandVettingPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of BrandVettingInstance\n *\n * @function getInstance\n * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingPage#\n *\n * @param {BrandVettingPayload} payload - Payload response from the API\n *\n * @returns BrandVettingInstance\n */\n/* jshint ignore:end */\nBrandVettingPage.prototype.getInstance = function getInstance(payload) {\n  return new BrandVettingInstance(this._version, payload, this._solution.brandSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nBrandVettingPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nBrandVettingPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the BrandVettingContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingInstance\n *\n * @property {string} accountSid - The SID of the Account that created the vetting\n * @property {string} brandSid - A2P BrandRegistration Sid\n * @property {string} brandVettingSid - SID for third-party vetting record\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {string} vettingId - The unique ID of the vetting\n * @property {string} vettingClass - The type of vetting\n * @property {string} vettingStatus - Status of vetting attempt\n * @property {brand_vetting.vetting_provider} vettingProvider -\n *          Third-party provider that has conducted the vetting\n * @property {string} url - The absolute URL of the Brand Vetting\n *\n * @param {V1} version - Version of the resource\n * @param {BrandVettingPayload} payload - The instance payload\n * @param {sid} brandSid - A2P BrandRegistration Sid\n * @param {sid} brandVettingSid - SID for third-party vetting record\n */\n/* jshint ignore:end */\nBrandVettingInstance = function BrandVettingInstance(version, payload, brandSid,\n                                                      brandVettingSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.brandSid = payload.brand_sid; // jshint ignore:line\n  this.brandVettingSid = payload.brand_vetting_sid; // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.vettingId = payload.vetting_id; // jshint ignore:line\n  this.vettingClass = payload.vetting_class; // jshint ignore:line\n  this.vettingStatus = payload.vetting_status; // jshint ignore:line\n  this.vettingProvider = payload.vetting_provider; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {brandSid: brandSid, brandVettingSid: brandVettingSid || this.brandVettingSid, };\n};\n\nObject.defineProperty(BrandVettingInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new BrandVettingContext(\n          this._version,\n          this._solution.brandSid,\n          this._solution.brandVettingSid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a BrandVettingInstance\n *\n * @function fetch\n * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed BrandVettingInstance\n */\n/* jshint ignore:end */\nBrandVettingInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nBrandVettingInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nBrandVettingInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the BrandVettingContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} brandSid - A2P BrandRegistration Sid\n * @param {sid} brandVettingSid - SID for third-party vetting record\n */\n/* jshint ignore:end */\nBrandVettingContext = function BrandVettingContext(version, brandSid,\n                                                    brandVettingSid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {brandSid: brandSid, brandVettingSid: brandVettingSid, };\n  this._uri = `/a2p/BrandRegistrations/${brandSid}/Vettings/${brandVettingSid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a BrandVettingInstance\n *\n * @function fetch\n * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed BrandVettingInstance\n */\n/* jshint ignore:end */\nBrandVettingContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new BrandVettingInstance(\n      this._version,\n      payload,\n      this._solution.brandSid,\n      this._solution.brandVettingSid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.BrandRegistrationContext.BrandVettingContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nBrandVettingContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nBrandVettingContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  BrandVettingList: BrandVettingList,\n  BrandVettingPage: BrandVettingPage,\n  BrandVettingInstance: BrandVettingInstance,\n  BrandVettingContext: BrandVettingContext\n};\n"]},"metadata":{},"sourceType":"script"}